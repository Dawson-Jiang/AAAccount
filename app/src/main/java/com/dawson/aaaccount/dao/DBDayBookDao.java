package com.dawson.aaaccount.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dawson.aaaccount.dao.bean.DBFamily;
import com.dawson.aaaccount.dao.bean.DBUser;

import com.dawson.aaaccount.dao.bean.DBDayBook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBDAY_BOOK".
*/
public class DBDayBookDao extends AbstractDao<DBDayBook, String> {

    public static final String TABLENAME = "DBDAY_BOOK";

    /**
     * Properties of entity DBDayBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property LastModifiedTime = new Property(1, java.util.Date.class, "lastModifiedTime", false, "LAST_MODIFIED_TIME");
        public final static Property Money = new Property(2, double.class, "money", false, "MONEY");
        public final static Property CreatorId = new Property(3, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property FamilyId = new Property(4, String.class, "familyId", false, "FAMILY_ID");
        public final static Property PayerId = new Property(5, String.class, "payerId", false, "PAYER_ID");
        public final static Property Date = new Property(6, java.util.Date.class, "date", false, "DATE");
        public final static Property Settled = new Property(7, int.class, "settled", false, "SETTLED");
        public final static Property SettleId = new Property(8, String.class, "settleId", false, "SETTLE_ID");
    }

    private DaoSession daoSession;


    public DBDayBookDao(DaoConfig config) {
        super(config);
    }
    
    public DBDayBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBDAY_BOOK\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"LAST_MODIFIED_TIME\" INTEGER," + // 1: lastModifiedTime
                "\"MONEY\" REAL NOT NULL ," + // 2: money
                "\"CREATOR_ID\" TEXT," + // 3: creatorId
                "\"FAMILY_ID\" TEXT," + // 4: familyId
                "\"PAYER_ID\" TEXT," + // 5: payerId
                "\"DATE\" INTEGER," + // 6: date
                "\"SETTLED\" INTEGER NOT NULL ," + // 7: settled
                "\"SETTLE_ID\" TEXT);"); // 8: settleId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBDAY_BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBDayBook entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        java.util.Date lastModifiedTime = entity.getLastModifiedTime();
        if (lastModifiedTime != null) {
            stmt.bindLong(2, lastModifiedTime.getTime());
        }
        stmt.bindDouble(3, entity.getMoney());
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(4, creatorId);
        }
 
        String familyId = entity.getFamilyId();
        if (familyId != null) {
            stmt.bindString(5, familyId);
        }
 
        String payerId = entity.getPayerId();
        if (payerId != null) {
            stmt.bindString(6, payerId);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date.getTime());
        }
        stmt.bindLong(8, entity.getSettled());
 
        String settleId = entity.getSettleId();
        if (settleId != null) {
            stmt.bindString(9, settleId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBDayBook entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        java.util.Date lastModifiedTime = entity.getLastModifiedTime();
        if (lastModifiedTime != null) {
            stmt.bindLong(2, lastModifiedTime.getTime());
        }
        stmt.bindDouble(3, entity.getMoney());
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(4, creatorId);
        }
 
        String familyId = entity.getFamilyId();
        if (familyId != null) {
            stmt.bindString(5, familyId);
        }
 
        String payerId = entity.getPayerId();
        if (payerId != null) {
            stmt.bindString(6, payerId);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date.getTime());
        }
        stmt.bindLong(8, entity.getSettled());
 
        String settleId = entity.getSettleId();
        if (settleId != null) {
            stmt.bindString(9, settleId);
        }
    }

    @Override
    protected final void attachEntity(DBDayBook entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DBDayBook readEntity(Cursor cursor, int offset) {
        DBDayBook entity = new DBDayBook( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // lastModifiedTime
            cursor.getDouble(offset + 2), // money
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // creatorId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // familyId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // payerId
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // date
            cursor.getInt(offset + 7), // settled
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // settleId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBDayBook entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLastModifiedTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setMoney(cursor.getDouble(offset + 2));
        entity.setCreatorId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFamilyId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPayerId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setSettled(cursor.getInt(offset + 7));
        entity.setSettleId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DBDayBook entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DBDayBook entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBDayBook entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDBUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDBFamilyDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getDBUserDao().getAllColumns());
            builder.append(" FROM DBDAY_BOOK T");
            builder.append(" LEFT JOIN DBUSER T0 ON T.\"CREATOR_ID\"=T0.\"ID\"");
            builder.append(" LEFT JOIN DBFAMILY T1 ON T.\"FAMILY_ID\"=T1.\"ID\"");
            builder.append(" LEFT JOIN DBUSER T2 ON T.\"PAYER_ID\"=T2.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DBDayBook loadCurrentDeep(Cursor cursor, boolean lock) {
        DBDayBook entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DBUser creator = loadCurrentOther(daoSession.getDBUserDao(), cursor, offset);
        entity.setCreator(creator);
        offset += daoSession.getDBUserDao().getAllColumns().length;

        DBFamily family = loadCurrentOther(daoSession.getDBFamilyDao(), cursor, offset);
        entity.setFamily(family);
        offset += daoSession.getDBFamilyDao().getAllColumns().length;

        DBUser payer = loadCurrentOther(daoSession.getDBUserDao(), cursor, offset);
        entity.setPayer(payer);

        return entity;    
    }

    public DBDayBook loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DBDayBook> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DBDayBook> list = new ArrayList<DBDayBook>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DBDayBook> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DBDayBook> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
