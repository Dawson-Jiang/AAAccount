package com.dawson.aaaccount.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.dawson.aaaccount.dao.bean.JoinDayBookToUser;
import com.dawson.aaaccount.dao.bean.JoinUserToFamily;

import com.dawson.aaaccount.dao.bean.DBUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBUSER".
*/
public class DBUserDao extends AbstractDao<DBUser, String> {

    public static final String TABLENAME = "DBUSER";

    /**
     * Properties of entity DBUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property LastModifiedTime = new Property(1, java.util.Date.class, "lastModifiedTime", false, "LAST_MODIFIED_TIME");
        public final static Property Number = new Property(2, int.class, "number", false, "NUMBER");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
    }

    private Query<DBUser> dBDayBook_CustomersQuery;
    private Query<DBUser> dBFamily_MembersQuery;

    public DBUserDao(DaoConfig config) {
        super(config);
    }
    
    public DBUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBUSER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"LAST_MODIFIED_TIME\" INTEGER," + // 1: lastModifiedTime
                "\"NUMBER\" INTEGER NOT NULL ," + // 2: number
                "\"NAME\" TEXT);"); // 3: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBUSER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBUser entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        java.util.Date lastModifiedTime = entity.getLastModifiedTime();
        if (lastModifiedTime != null) {
            stmt.bindLong(2, lastModifiedTime.getTime());
        }
        stmt.bindLong(3, entity.getNumber());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBUser entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        java.util.Date lastModifiedTime = entity.getLastModifiedTime();
        if (lastModifiedTime != null) {
            stmt.bindLong(2, lastModifiedTime.getTime());
        }
        stmt.bindLong(3, entity.getNumber());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DBUser readEntity(Cursor cursor, int offset) {
        DBUser entity = new DBUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // lastModifiedTime
            cursor.getInt(offset + 2), // number
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLastModifiedTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setNumber(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DBUser entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DBUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBUser entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "customers" to-many relationship of DBDayBook. */
    public List<DBUser> _queryDBDayBook_Customers(String did) {
        synchronized (this) {
            if (dBDayBook_CustomersQuery == null) {
                QueryBuilder<DBUser> queryBuilder = queryBuilder();
                queryBuilder.join(JoinDayBookToUser.class, JoinDayBookToUserDao.Properties.Uid)
                    .where(JoinDayBookToUserDao.Properties.Did.eq(did));
                dBDayBook_CustomersQuery = queryBuilder.build();
            }
        }
        Query<DBUser> query = dBDayBook_CustomersQuery.forCurrentThread();
        query.setParameter(0, did);
        return query.list();
    }

    /** Internal query to resolve the "members" to-many relationship of DBFamily. */
    public List<DBUser> _queryDBFamily_Members(String fid) {
        synchronized (this) {
            if (dBFamily_MembersQuery == null) {
                QueryBuilder<DBUser> queryBuilder = queryBuilder();
                queryBuilder.join(JoinUserToFamily.class, JoinUserToFamilyDao.Properties.Uid)
                    .where(JoinUserToFamilyDao.Properties.Fid.eq(fid));
                dBFamily_MembersQuery = queryBuilder.build();
            }
        }
        Query<DBUser> query = dBFamily_MembersQuery.forCurrentThread();
        query.setParameter(0, fid);
        return query.list();
    }

}
